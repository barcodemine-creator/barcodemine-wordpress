<?php
/**
 * Vulnerability Scanner Module for Kloudbean Enterprise Security Suite
 * 
 * @package KloudbeanEnterpriseSecurity
 * @since 1.0.0
 */

namespace KloudbeanEnterpriseSecurity\Modules;

if (!defined('ABSPATH')) {
    exit('Direct access denied.');
}

/**
 * Vulnerability Scanner class handling vulnerability detection and scanning
 */
class VulnerabilityScanner {
    
    private $database;
    private $logging;
    private $utilities;
    
    /**
     * Constructor
     */
    public function __construct() {
        $this->database = new \KloudbeanEnterpriseSecurity\Database();
        $this->logging = new \KloudbeanEnterpriseSecurity\Logging();
        $this->utilities = new \KloudbeanEnterpriseSecurity\Utilities();
        
        $this->init();
    }
    
    /**
     * Initialize vulnerability scanner
     */
    private function init() {
        add_action('init', array($this, 'initVulnerabilityScanner'));
        add_action('kbes_daily_security_scan', array($this, 'runDailyScan'));
    }
    
    /**
     * Initialize vulnerability scanner
     */
    public function initVulnerabilityScanner() {
        // Set up vulnerability scanner hooks
        add_action('wp_loaded', array($this, 'scanForVulnerabilities'));
    }
    
    /**
     * Run daily scan
     */
    public function runDailyScan() {
        $this->scanForVulnerabilities();
    }
    
    /**
     * Scan for vulnerabilities
     */
    public function scanForVulnerabilities() {
        $this->logScanEvent('vulnerability_scan_started', array(
            'timestamp' => current_time('mysql')
        ));
        
        // Scan WordPress core vulnerabilities
        $this->scanCoreVulnerabilities();
        
        // Scan plugin vulnerabilities
        $this->scanPluginVulnerabilities();
        
        // Scan theme vulnerabilities
        $this->scanThemeVulnerabilities();
        
        // Update vulnerability database
        $this->updateVulnerabilityDatabase();
        
        $this->logScanEvent('vulnerability_scan_completed', array(
            'timestamp' => current_time('mysql')
        ));
    }
    
    /**
     * Scan core vulnerabilities
     */
    private function scanCoreVulnerabilities() {
        $wp_version = get_bloginfo('version');
        $vulnerabilities = $this->getCoreVulnerabilities($wp_version);
        
        foreach ($vulnerabilities as $vulnerability) {
            $this->logVulnerability($vulnerability, 'core');
        }
    }
    
    /**
     * Scan plugin vulnerabilities
     */
    private function scanPluginVulnerabilities() {
        $plugins = get_plugins();
        
        foreach ($plugins as $plugin_file => $plugin_data) {
            if (is_plugin_active($plugin_file)) {
                $plugin_slug = dirname($plugin_file);
                $plugin_version = $plugin_data['Version'];
                
                $vulnerabilities = $this->getPluginVulnerabilities($plugin_slug, $plugin_version);
                
                foreach ($vulnerabilities as $vulnerability) {
                    $this->logVulnerability($vulnerability, 'plugin', $plugin_slug);
                }
            }
        }
    }
    
    /**
     * Scan theme vulnerabilities
     */
    private function scanThemeVulnerabilities() {
        $themes = wp_get_themes();
        
        foreach ($themes as $theme) {
            $theme_slug = $theme->get_stylesheet();
            $theme_version = $theme->get('Version');
            
            $vulnerabilities = $this->getThemeVulnerabilities($theme_slug, $theme_version);
            
            foreach ($vulnerabilities as $vulnerability) {
                $this->logVulnerability($vulnerability, 'theme', $theme_slug);
            }
        }
    }
    
    /**
     * Get core vulnerabilities
     */
    private function getCoreVulnerabilities($version) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        $vulnerabilities = $wpdb->get_results($wpdb->prepare(
            "SELECT * FROM $table_name WHERE affected_software = 'wordpress' AND affected_version <= %s AND (fixed_version IS NULL OR fixed_version > %s)",
            $version,
            $version
        ));
        
        return $vulnerabilities;
    }
    
    /**
     * Get plugin vulnerabilities
     */
    private function getPluginVulnerabilities($plugin_slug, $version) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        $vulnerabilities = $wpdb->get_results($wpdb->prepare(
            "SELECT * FROM $table_name WHERE affected_software = %s AND affected_version <= %s AND (fixed_version IS NULL OR fixed_version > %s)",
            $plugin_slug,
            $version,
            $version
        ));
        
        return $vulnerabilities;
    }
    
    /**
     * Get theme vulnerabilities
     */
    private function getThemeVulnerabilities($theme_slug, $version) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        $vulnerabilities = $wpdb->get_results($wpdb->prepare(
            "SELECT * FROM $table_name WHERE affected_software = %s AND affected_version <= %s AND (fixed_version IS NULL OR fixed_version > %s)",
            $theme_slug,
            $version,
            $version
        ));
        
        return $vulnerabilities;
    }
    
    /**
     * Log vulnerability
     */
    private function logVulnerability($vulnerability, $type, $software = null) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_threats';
        
        $wpdb->insert(
            $table_name,
            array(
                'threat_type' => 'vulnerability',
                'threat_name' => $vulnerability->title,
                'description' => $vulnerability->description,
                'severity' => $vulnerability->severity,
                'source' => 'vulnerability_scanner',
                'file_path' => $software ? $software : 'core',
                'signature_id' => $vulnerability->cve_id,
                'blocked' => 0,
                'quarantined' => 0,
                'timestamp' => current_time('mysql')
            ),
            array(
                '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%d', '%d', '%s'
            )
        );
        
        // Send notification
        $this->sendVulnerabilityNotification($vulnerability, $type, $software);
    }
    
    /**
     * Send vulnerability notification
     */
    private function sendVulnerabilityNotification($vulnerability, $type, $software) {
        do_action('kbes_threat_detected', array(
            'threat_type' => 'vulnerability',
            'threat_name' => $vulnerability->title,
            'description' => 'Vulnerability found in ' . $type . ': ' . $vulnerability->description,
            'severity' => $vulnerability->severity,
            'cve_id' => $vulnerability->cve_id,
            'cvss_score' => $vulnerability->cvss_score,
            'software' => $software ? $software : 'core',
            'affected_version' => $vulnerability->affected_version,
            'fixed_version' => $vulnerability->fixed_version
        ));
    }
    
    /**
     * Update vulnerability database
     */
    private function updateVulnerabilityDatabase() {
        // Update from CVE database
        $this->updateFromCVEDatabase();
        
        // Update from WordPress vulnerability database
        $this->updateFromWordPressDatabase();
        
        // Update from plugin vulnerability database
        $this->updateFromPluginDatabase();
    }
    
    /**
     * Update from CVE database
     */
    private function updateFromCVEDatabase() {
        // Implementation for updating from CVE database
        // This would typically involve downloading and parsing CVE data
    }
    
    /**
     * Update from WordPress vulnerability database
     */
    private function updateFromWordPressDatabase() {
        // Implementation for updating from WordPress vulnerability database
        // This would typically involve downloading and parsing WordPress vulnerability data
    }
    
    /**
     * Update from plugin vulnerability database
     */
    private function updateFromPluginDatabase() {
        // Implementation for updating from plugin vulnerability database
        // This would typically involve downloading and parsing plugin vulnerability data
    }
    
    /**
     * Log scan event
     */
    private function logScanEvent($event_type, $data) {
        $this->logging->logSystemEvent($event_type, $data);
    }
    
    /**
     * Get vulnerabilities
     */
    public function getVulnerabilities($filters = array()) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        $where_clause = '';
        $params = array();
        
        if (!empty($filters['affected_software'])) {
            $where_clause .= ' AND affected_software = %s';
            $params[] = $filters['affected_software'];
        }
        
        if (!empty($filters['severity'])) {
            $where_clause .= ' AND severity = %s';
            $params[] = $filters['severity'];
        }
        
        if (!empty($filters['start_date'])) {
            $where_clause .= ' AND published_date >= %s';
            $params[] = $filters['start_date'];
        }
        
        if (!empty($filters['end_date'])) {
            $where_clause .= ' AND published_date <= %s';
            $params[] = $filters['end_date'];
        }
        
        $limit = $filters['limit'] ?? 20;
        $offset = $filters['offset'] ?? 0;
        
        $query = "SELECT * FROM $table_name WHERE 1=1 $where_clause ORDER BY published_date DESC LIMIT %d OFFSET %d";
        $params[] = $limit;
        $params[] = $offset;
        
        return $wpdb->get_results($wpdb->prepare($query, $params));
    }
    
    /**
     * Get vulnerability
     */
    public function getVulnerability($vulnerability_id) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        return $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM $table_name WHERE id = %d",
            $vulnerability_id
        ));
    }
    
    /**
     * Add vulnerability
     */
    public function addVulnerability($vulnerability_data) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        $wpdb->insert(
            $table_name,
            array(
                'cve_id' => $vulnerability_data['cve_id'],
                'title' => $vulnerability_data['title'],
                'description' => $vulnerability_data['description'],
                'severity' => $vulnerability_data['severity'],
                'cvss_score' => $vulnerability_data['cvss_score'],
                'affected_software' => $vulnerability_data['affected_software'],
                'affected_version' => $vulnerability_data['affected_version'],
                'fixed_version' => $vulnerability_data['fixed_version'],
                'published_date' => $vulnerability_data['published_date'],
                'last_modified' => $vulnerability_data['last_modified'],
                'references' => $vulnerability_data['references']
            ),
            array(
                '%s', '%s', '%s', '%s', '%f', '%s', '%s', '%s', '%s', '%s', '%s'
            )
        );
        
        return $wpdb->insert_id;
    }
    
    /**
     * Update vulnerability
     */
    public function updateVulnerability($vulnerability_id, $vulnerability_data) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        $wpdb->update(
            $table_name,
            array(
                'title' => $vulnerability_data['title'],
                'description' => $vulnerability_data['description'],
                'severity' => $vulnerability_data['severity'],
                'cvss_score' => $vulnerability_data['cvss_score'],
                'affected_software' => $vulnerability_data['affected_software'],
                'affected_version' => $vulnerability_data['affected_version'],
                'fixed_version' => $vulnerability_data['fixed_version'],
                'published_date' => $vulnerability_data['published_date'],
                'last_modified' => $vulnerability_data['last_modified'],
                'references' => $vulnerability_data['references']
            ),
            array('id' => $vulnerability_id),
            array('%s', '%s', '%s', '%f', '%s', '%s', '%s', '%s', '%s', '%s'),
            array('%d')
        );
    }
    
    /**
     * Delete vulnerability
     */
    public function deleteVulnerability($vulnerability_id) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        $wpdb->delete(
            $table_name,
            array('id' => $vulnerability_id),
            array('%d')
        );
    }
    
    /**
     * Get vulnerability statistics
     */
    public function getVulnerabilityStatistics() {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        $stats = array();
        
        // Total vulnerabilities
        $stats['total_vulnerabilities'] = $wpdb->get_var("SELECT COUNT(*) FROM $table_name");
        
        // Vulnerabilities by severity
        $stats['by_severity'] = $wpdb->get_results("SELECT severity, COUNT(*) as count FROM $table_name GROUP BY severity");
        
        // Vulnerabilities by software
        $stats['by_software'] = $wpdb->get_results("SELECT affected_software, COUNT(*) as count FROM $table_name GROUP BY affected_software ORDER BY count DESC LIMIT 10");
        
        // Recent vulnerabilities
        $stats['recent_vulnerabilities'] = $wpdb->get_results("SELECT * FROM $table_name ORDER BY published_date DESC LIMIT 10");
        
        return $stats;
    }
    
    /**
     * Check if software is vulnerable
     */
    public function isSoftwareVulnerable($software, $version) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        $vulnerability = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM $table_name WHERE affected_software = %s AND affected_version <= %s AND (fixed_version IS NULL OR fixed_version > %s) LIMIT 1",
            $software,
            $version,
            $version
        ));
        
        return $vulnerability !== null;
    }
    
    /**
     * Get software vulnerabilities
     */
    public function getSoftwareVulnerabilities($software, $version) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        return $wpdb->get_results($wpdb->prepare(
            "SELECT * FROM $table_name WHERE affected_software = %s AND affected_version <= %s AND (fixed_version IS NULL OR fixed_version > %s) ORDER BY severity DESC, cvss_score DESC",
            $software,
            $version,
            $version
        ));
    }
    
    /**
     * Get vulnerability report
     */
    public function getVulnerabilityReport() {
        $vulnerabilities = $this->getVulnerabilities();
        $statistics = $this->getVulnerabilityStatistics();
        
        return array(
            'vulnerabilities' => $vulnerabilities,
            'statistics' => $statistics,
            'generated_at' => current_time('mysql')
        );
    }
}
