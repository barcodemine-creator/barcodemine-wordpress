<?php
/**
 * CVE Feed for Kloudbean Enterprise Security Suite Vulnerability Scanner
 * 
 * @package KloudbeanEnterpriseSecurity
 * @since 1.0.0
 */

namespace KloudbeanEnterpriseSecurity\Modules\VulnerabilityScanner;

if (!defined('ABSPATH')) {
    exit('Direct access denied.');
}

/**
 * CVE Feed class for managing CVE data
 */
class CVEFeed {
    
    private $database;
    private $logging;
    private $utilities;
    
    /**
     * Constructor
     */
    public function __construct() {
        $this->database = new \KloudbeanEnterpriseSecurity\Database();
        $this->logging = new \KloudbeanEnterpriseSecurity\Logging();
        $this->utilities = new \KloudbeanEnterpriseSecurity\Utilities();
        
        $this->init();
    }
    
    /**
     * Initialize CVE feed
     */
    private function init() {
        add_action('init', array($this, 'initCVEFeed'));
        add_action('kbes_daily_cve_update', array($this, 'updateFeed'));
    }
    
    /**
     * Initialize CVE feed
     */
    public function initCVEFeed() {
        // Set up CVE feed hooks
    }
    
    /**
     * Update CVE feed
     */
    public function updateFeed() {
        $this->logFeedEvent('cve_feed_update_started', array(
            'timestamp' => current_time('mysql')
        ));
        
        // Update from various sources
        $this->updateFromNVD();
        $this->updateFromWordPressVulnDB();
        $this->updateFromWPScan();
        
        $this->logFeedEvent('cve_feed_update_completed', array(
            'timestamp' => current_time('mysql')
        ));
    }
    
    /**
     * Update from NVD
     */
    private function updateFromNVD() {
        $nvd_url = 'https://services.nvd.nist.gov/rest/json/cves/2.0';
        $response = wp_remote_get($nvd_url);
        
        if (is_wp_error($response)) {
            $this->logFeedEvent('cve_feed_nvd_error', array(
                'error' => $response->get_error_message()
            ));
            return;
        }
        
        $body = wp_remote_retrieve_body($response);
        $data = json_decode($body, true);
        
        if (isset($data['vulnerabilities'])) {
            foreach ($data['vulnerabilities'] as $vuln) {
                $this->processCVE($vuln);
            }
        }
    }
    
    /**
     * Update from WordPress Vulnerability Database
     */
    private function updateFromWordPressVulnDB() {
        $wp_vuln_url = 'https://wpvulndb.com/api/v3/wordpresses';
        $response = wp_remote_get($wp_vuln_url);
        
        if (is_wp_error($response)) {
            $this->logFeedEvent('cve_feed_wp_vuln_error', array(
                'error' => $response->get_error_message()
            ));
            return;
        }
        
        $body = wp_remote_retrieve_body($response);
        $data = json_decode($body, true);
        
        if (isset($data['wordpresses'])) {
            foreach ($data['wordpresses'] as $version => $vulns) {
                foreach ($vulns as $vuln) {
                    $this->processWordPressVulnerability($vuln, $version);
                }
            }
        }
    }
    
    /**
     * Update from WPScan
     */
    private function updateFromWPScan() {
        $wpscan_url = 'https://wpscan.com/api/v3/plugins';
        $response = wp_remote_get($wpscan_url);
        
        if (is_wp_error($response)) {
            $this->logFeedEvent('cve_feed_wpscan_error', array(
                'error' => $response->get_error_message()
            ));
            return;
        }
        
        $body = wp_remote_retrieve_body($response);
        $data = json_decode($body, true);
        
        if (isset($data['plugins'])) {
            foreach ($data['plugins'] as $plugin_slug => $plugin_data) {
                if (isset($plugin_data['vulnerabilities'])) {
                    foreach ($plugin_data['vulnerabilities'] as $vuln) {
                        $this->processPluginVulnerability($vuln, $plugin_slug);
                    }
                }
            }
        }
    }
    
    /**
     * Process CVE
     */
    private function processCVE($cve_data) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        $cve_id = $cve_data['cve']['id'] ?? '';
        $title = $cve_data['cve']['descriptions'][0]['value'] ?? '';
        $severity = $this->getSeverityFromCVSS($cve_data['cve']['metrics'] ?? array());
        $cvss_score = $this->getCVSSScore($cve_data['cve']['metrics'] ?? array());
        
        // Check if CVE already exists
        $existing = $wpdb->get_var($wpdb->prepare(
            "SELECT id FROM $table_name WHERE cve_id = %s",
            $cve_id
        ));
        
        if ($existing) {
            return;
        }
        
        $wpdb->insert(
            $table_name,
            array(
                'cve_id' => $cve_id,
                'title' => $title,
                'description' => $title,
                'severity' => $severity,
                'cvss_score' => $cvss_score,
                'affected_software' => 'wordpress',
                'affected_version' => 'all',
                'fixed_version' => null,
                'published_date' => $cve_data['cve']['published'] ?? current_time('mysql'),
                'last_modified' => $cve_data['cve']['lastModified'] ?? current_time('mysql'),
                'references' => json_encode($cve_data['cve']['references'] ?? array())
            ),
            array(
                '%s', '%s', '%s', '%s', '%f', '%s', '%s', '%s', '%s', '%s', '%s'
            )
        );
    }
    
    /**
     * Process WordPress vulnerability
     */
    private function processWordPressVulnerability($vuln_data, $version) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        $cve_id = $vuln_data['cve_id'] ?? '';
        $title = $vuln_data['title'] ?? '';
        $severity = $vuln_data['severity'] ?? 'medium';
        $cvss_score = $vuln_data['cvss_score'] ?? 0.0;
        
        // Check if vulnerability already exists
        $existing = $wpdb->get_var($wpdb->prepare(
            "SELECT id FROM $table_name WHERE cve_id = %s AND affected_software = 'wordpress'",
            $cve_id
        ));
        
        if ($existing) {
            return;
        }
        
        $wpdb->insert(
            $table_name,
            array(
                'cve_id' => $cve_id,
                'title' => $title,
                'description' => $vuln_data['description'] ?? '',
                'severity' => $severity,
                'cvss_score' => $cvss_score,
                'affected_software' => 'wordpress',
                'affected_version' => $version,
                'fixed_version' => $vuln_data['fixed_in'] ?? null,
                'published_date' => $vuln_data['published_date'] ?? current_time('mysql'),
                'last_modified' => current_time('mysql'),
                'references' => json_encode($vuln_data['references'] ?? array())
            ),
            array(
                '%s', '%s', '%s', '%s', '%f', '%s', '%s', '%s', '%s', '%s', '%s'
            )
        );
    }
    
    /**
     * Process plugin vulnerability
     */
    private function processPluginVulnerability($vuln_data, $plugin_slug) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        $cve_id = $vuln_data['cve_id'] ?? '';
        $title = $vuln_data['title'] ?? '';
        $severity = $vuln_data['severity'] ?? 'medium';
        $cvss_score = $vuln_data['cvss_score'] ?? 0.0;
        
        // Check if vulnerability already exists
        $existing = $wpdb->get_var($wpdb->prepare(
            "SELECT id FROM $table_name WHERE cve_id = %s AND affected_software = %s",
            $cve_id,
            $plugin_slug
        ));
        
        if ($existing) {
            return;
        }
        
        $wpdb->insert(
            $table_name,
            array(
                'cve_id' => $cve_id,
                'title' => $title,
                'description' => $vuln_data['description'] ?? '',
                'severity' => $severity,
                'cvss_score' => $cvss_score,
                'affected_software' => $plugin_slug,
                'affected_version' => $vuln_data['affected_version'] ?? 'all',
                'fixed_version' => $vuln_data['fixed_in'] ?? null,
                'published_date' => $vuln_data['published_date'] ?? current_time('mysql'),
                'last_modified' => current_time('mysql'),
                'references' => json_encode($vuln_data['references'] ?? array())
            ),
            array(
                '%s', '%s', '%s', '%s', '%f', '%s', '%s', '%s', '%s', '%s', '%s'
            )
        );
    }
    
    /**
     * Get severity from CVSS
     */
    private function getSeverityFromCVSS($metrics) {
        $cvss_score = $this->getCVSSScore($metrics);
        
        if ($cvss_score >= 9.0) {
            return 'critical';
        } elseif ($cvss_score >= 7.0) {
            return 'high';
        } elseif ($cvss_score >= 4.0) {
            return 'medium';
        } else {
            return 'low';
        }
    }
    
    /**
     * Get CVSS score
     */
    private function getCVSSScore($metrics) {
        if (isset($metrics['cvssMetricV31'])) {
            return $metrics['cvssMetricV31'][0]['cvssData']['baseScore'] ?? 0.0;
        } elseif (isset($metrics['cvssMetricV30'])) {
            return $metrics['cvssMetricV30'][0]['cvssData']['baseScore'] ?? 0.0;
        } elseif (isset($metrics['cvssMetricV2'])) {
            return $metrics['cvssMetricV2'][0]['cvssData']['baseScore'] ?? 0.0;
        }
        
        return 0.0;
    }
    
    /**
     * Get CVE data
     */
    public function getCVEData($type, $software, $version = null) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        $where_clause = 'WHERE affected_software = %s';
        $params = array($software);
        
        if ($version) {
            $where_clause .= ' AND affected_version <= %s AND (fixed_version IS NULL OR fixed_version > %s)';
            $params[] = $version;
            $params[] = $version;
        }
        
        $query = "SELECT * FROM $table_name $where_clause ORDER BY severity DESC, cvss_score DESC";
        
        return $wpdb->get_results($wpdb->prepare($query, $params));
    }
    
    /**
     * Get feed
     */
    public function getFeed() {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_vulnerabilities';
        
        return $wpdb->get_results("SELECT * FROM $table_name ORDER BY published_date DESC LIMIT 100");
    }
    
    /**
     * Log feed event
     */
    private function logFeedEvent($event_type, $data) {
        $this->logging->logSystemEvent($event_type, $data);
    }
}
