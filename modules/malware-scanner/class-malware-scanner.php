<?php
/**
 * Malware Scanner Module for Kloudbean Enterprise Security Suite
 * 
 * @package KloudbeanEnterpriseSecurity
 * @since 1.0.0
 */

namespace KloudbeanEnterpriseSecurity\Modules;

if (!defined('ABSPATH')) {
    exit('Direct access denied.');
}

/**
 * Malware Scanner class handling malware detection and scanning
 */
class MalwareScanner {
    
    private $database;
    private $logging;
    private $utilities;
    
    /**
     * Constructor
     */
    public function __construct() {
        $this->database = new \KloudbeanEnterpriseSecurity\Database();
        $this->logging = new \KloudbeanEnterpriseSecurity\Logging();
        $this->utilities = new \KloudbeanEnterpriseSecurity\Utilities();
        
        $this->init();
    }
    
    /**
     * Initialize malware scanner
     */
    private function init() {
        add_action('init', array($this, 'initMalwareScanner'));
        add_action('kbes_daily_security_scan', array($this, 'runDailyScan'));
    }
    
    /**
     * Initialize malware scanner
     */
    public function initMalwareScanner() {
        // Set up malware scanner hooks
        add_action('wp_loaded', array($this, 'scanUploadedFiles'));
        add_action('wp_loaded', array($this, 'monitorFileChanges'));
    }
    
    /**
     * Run daily scan
     */
    public function runDailyScan() {
        $this->scanForMalware();
    }
    
    /**
     * Scan for malware
     */
    public function scanForMalware() {
        $this->logScanEvent('malware_scan_started', array(
            'timestamp' => current_time('mysql')
        ));
        
        // Scan WordPress core files
        $this->scanCoreFiles();
        
        // Scan plugin files
        $this->scanPluginFiles();
        
        // Scan theme files
        $this->scanThemeFiles();
        
        // Scan uploads directory
        $this->scanUploadsDirectory();
        
        // Scan for suspicious files
        $this->scanForSuspiciousFiles();
        
        $this->logScanEvent('malware_scan_completed', array(
            'timestamp' => current_time('mysql')
        ));
    }
    
    /**
     * Scan uploaded files
     */
    public function scanUploadedFiles() {
        add_filter('wp_handle_upload_prefilter', array($this, 'validateUploadedFile'));
    }
    
    /**
     * Monitor file changes
     */
    public function monitorFileChanges() {
        add_action('wp_handle_upload', array($this, 'scanUploadedFile'), 10, 2);
    }
    
    /**
     * Validate uploaded file
     */
    public function validateUploadedFile($file) {
        // Check file type
        if ($this->isSuspiciousFileType($file['name'])) {
            $file['error'] = 'File type not allowed';
            return $file;
        }
        
        // Check file size
        if ($file['size'] > get_option('kbes_max_file_size', 10485760)) {
            $file['error'] = 'File size too large';
            return $file;
        }
        
        // Check for malware
        if ($this->isFileMalicious($file['tmp_name'])) {
            $file['error'] = 'File appears to be malicious';
            return $file;
        }
        
        return $file;
    }
    
    /**
     * Scan uploaded file
     */
    public function scanUploadedFile($file, $filename) {
        $this->scanFile($file['tmp_name'], $filename);
        
        return $file;
    }
    
    /**
     * Scan core files
     */
    private function scanCoreFiles() {
        $core_files = $this->getCoreFiles();
        
        foreach ($core_files as $file) {
            $this->scanFile($file, 'core');
        }
    }
    
    /**
     * Scan plugin files
     */
    private function scanPluginFiles() {
        $plugin_files = $this->getPluginFiles();
        
        foreach ($plugin_files as $file) {
            $this->scanFile($file, 'plugin');
        }
    }
    
    /**
     * Scan theme files
     */
    private function scanThemeFiles() {
        $theme_files = $this->getThemeFiles();
        
        foreach ($theme_files as $file) {
            $this->scanFile($file, 'theme');
        }
    }
    
    /**
     * Scan uploads directory
     */
    private function scanUploadsDirectory() {
        $upload_dir = wp_upload_dir();
        $uploads_path = $upload_dir['basedir'];
        
        if (file_exists($uploads_path)) {
            $this->scanDirectory($uploads_path, 'upload');
        }
    }
    
    /**
     * Scan for suspicious files
     */
    private function scanForSuspiciousFiles() {
        $suspicious_patterns = array(
            '*.php',
            '*.phtml',
            '*.php3',
            '*.php4',
            '*.php5',
            '*.php7',
            '*.pht',
            '*.phtm',
            '*.shtml',
            '*.shtm',
            '*.htaccess',
            '*.htpasswd'
        );
        
        foreach ($suspicious_patterns as $pattern) {
            $files = glob(ABSPATH . $pattern);
            
            foreach ($files as $file) {
                $this->scanFile($file, 'suspicious');
            }
        }
    }
    
    /**
     * Scan file
     */
    private function scanFile($file_path, $file_type) {
        if (!file_exists($file_path) || !is_file($file_path)) {
            return;
        }
        
        // Check file size
        if (filesize($file_path) > get_option('kbes_max_scan_file_size', 10485760)) {
            return;
        }
        
        // Read file content
        $content = file_get_contents($file_path);
        
        if ($content === false) {
            return;
        }
        
        // Check for malware signatures
        $malware_found = $this->checkMalwareSignatures($content, $file_path);
        
        if ($malware_found) {
            $this->handleMalwareFound($file_path, $malware_found, $file_type);
        }
        
        // Check for suspicious patterns
        $suspicious_patterns = $this->checkSuspiciousPatterns($content, $file_path);
        
        if ($suspicious_patterns) {
            $this->handleSuspiciousPatterns($file_path, $suspicious_patterns, $file_type);
        }
    }
    
    /**
     * Scan directory
     */
    private function scanDirectory($directory_path, $file_type) {
        if (!is_dir($directory_path)) {
            return;
        }
        
        $iterator = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($directory_path));
        
        foreach ($iterator as $file) {
            if ($file->isFile()) {
                $this->scanFile($file->getPathname(), $file_type);
            }
        }
    }
    
    /**
     * Check malware signatures
     */
    private function checkMalwareSignatures($content, $file_path) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_malware_signatures';
        
        $signatures = $wpdb->get_results("SELECT * FROM $table_name WHERE enabled = 1");
        
        foreach ($signatures as $signature) {
            if (preg_match('/' . $signature->signature_pattern . '/i', $content)) {
                return array(
                    'signature_id' => $signature->id,
                    'signature_name' => $signature->signature_name,
                    'malware_family' => $signature->malware_family,
                    'severity' => $signature->severity
                );
            }
        }
        
        return false;
    }
    
    /**
     * Check suspicious patterns
     */
    private function checkSuspiciousPatterns($content, $file_path) {
        $suspicious_patterns = array(
            '/eval\s*\(/',
            '/base64_decode/',
            '/system\s*\(/',
            '/exec\s*\(/',
            '/shell_exec/',
            '/passthru/',
            '/proc_open/',
            '/popen/',
            '/file_get_contents\s*\(\s*["\']?http/',
            '/curl_exec/',
            '/fsockopen/',
            '/socket_create/',
            '/gzinflate/',
            '/str_rot13/',
            '/create_function/',
            '/assert\s*\(/',
            '/preg_replace\s*\([^,]+,\s*["\']?\/e/',
            '/<script[^>]*>.*?<\/script>/i',
            '/<iframe[^>]*>.*?<\/iframe>/i',
            '/javascript:/i',
            '/vbscript:/i'
        );
        
        $found_patterns = array();
        
        foreach ($suspicious_patterns as $pattern) {
            if (preg_match($pattern, $content)) {
                $found_patterns[] = $pattern;
            }
        }
        
        return $found_patterns;
    }
    
    /**
     * Handle malware found
     */
    private function handleMalwareFound($file_path, $malware_info, $file_type) {
        // Log malware detection
        $this->logMalwareDetection($file_path, $malware_info, $file_type);
        
        // Quarantine file if enabled
        if (get_option('kbes_auto_quarantine', false)) {
            $this->quarantineFile($file_path, $malware_info);
        }
        
        // Send notification
        $this->sendMalwareNotification($file_path, $malware_info);
    }
    
    /**
     * Handle suspicious patterns
     */
    private function handleSuspiciousPatterns($file_path, $patterns, $file_type) {
        // Log suspicious patterns
        $this->logSuspiciousPatterns($file_path, $patterns, $file_type);
        
        // Send notification
        $this->sendSuspiciousPatternNotification($file_path, $patterns);
    }
    
    /**
     * Log malware detection
     */
    private function logMalwareDetection($file_path, $malware_info, $file_type) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_threats';
        
        $wpdb->insert(
            $table_name,
            array(
                'threat_type' => 'malware',
                'threat_name' => $malware_info['signature_name'],
                'description' => 'Malware detected: ' . $malware_info['malware_family'],
                'severity' => $malware_info['severity'],
                'source' => 'malware_scanner',
                'file_path' => $file_path,
                'file_hash' => $this->utilities->getFileHash($file_path),
                'signature_id' => $malware_info['signature_id'],
                'blocked' => 1,
                'quarantined' => get_option('kbes_auto_quarantine', false) ? 1 : 0,
                'timestamp' => current_time('mysql')
            ),
            array(
                '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%d', '%d', '%s'
            )
        );
    }
    
    /**
     * Log suspicious patterns
     */
    private function logSuspiciousPatterns($file_path, $patterns, $file_type) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_threats';
        
        $wpdb->insert(
            $table_name,
            array(
                'threat_type' => 'suspicious_pattern',
                'threat_name' => 'Suspicious patterns detected',
                'description' => 'Suspicious patterns found: ' . implode(', ', $patterns),
                'severity' => 'medium',
                'source' => 'malware_scanner',
                'file_path' => $file_path,
                'file_hash' => $this->utilities->getFileHash($file_path),
                'blocked' => 0,
                'quarantined' => 0,
                'timestamp' => current_time('mysql')
            ),
            array(
                '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%d', '%d', '%s'
            )
        );
    }
    
    /**
     * Quarantine file
     */
    private function quarantineFile($file_path, $malware_info) {
        $quarantine_dir = $this->getQuarantineDirectory();
        $quarantine_file = $quarantine_dir . '/' . basename($file_path) . '_' . time();
        
        if (copy($file_path, $quarantine_file)) {
            // Log quarantine
            $this->logQuarantine($file_path, $quarantine_file, $malware_info);
            
            // Delete original file
            unlink($file_path);
        }
    }
    
    /**
     * Log quarantine
     */
    private function logQuarantine($original_path, $quarantine_path, $malware_info) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_quarantine';
        
        $wpdb->insert(
            $table_name,
            array(
                'original_path' => $original_path,
                'quarantine_path' => $quarantine_path,
                'file_hash' => $this->utilities->getFileHash($original_path),
                'threat_type' => 'malware',
                'threat_name' => $malware_info['signature_name'],
                'quarantined_at' => current_time('mysql'),
                'quarantined_by' => get_current_user_id()
            ),
            array(
                '%s', '%s', '%s', '%s', '%s', '%s', '%d'
            )
        );
    }
    
    /**
     * Send malware notification
     */
    private function sendMalwareNotification($file_path, $malware_info) {
        do_action('kbes_threat_detected', array(
            'threat_type' => 'malware',
            'threat_name' => $malware_info['signature_name'],
            'description' => 'Malware detected in file: ' . $file_path,
            'severity' => $malware_info['severity'],
            'file_path' => $file_path,
            'malware_family' => $malware_info['malware_family']
        ));
    }
    
    /**
     * Send suspicious pattern notification
     */
    private function sendSuspiciousPatternNotification($file_path, $patterns) {
        do_action('kbes_threat_detected', array(
            'threat_type' => 'suspicious_pattern',
            'threat_name' => 'Suspicious patterns detected',
            'description' => 'Suspicious patterns found in file: ' . $file_path,
            'severity' => 'medium',
            'file_path' => $file_path,
            'patterns' => $patterns
        ));
    }
    
    /**
     * Log scan event
     */
    private function logScanEvent($event_type, $data) {
        $this->logging->logSystemEvent($event_type, $data);
    }
    
    /**
     * Check if file type is suspicious
     */
    private function isSuspiciousFileType($filename) {
        $suspicious_extensions = array(
            'php', 'phtml', 'php3', 'php4', 'php5', 'php7', 'pht', 'phtm',
            'shtml', 'shtm', 'htaccess', 'htpasswd', 'js', 'vbs', 'bat',
            'cmd', 'com', 'exe', 'scr', 'pif', 'sh', 'cgi', 'pl', 'py'
        );
        
        $extension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
        
        return in_array($extension, $suspicious_extensions);
    }
    
    /**
     * Check if file is malicious
     */
    private function isFileMalicious($file_path) {
        if (!file_exists($file_path)) {
            return false;
        }
        
        $content = file_get_contents($file_path);
        
        if ($content === false) {
            return false;
        }
        
        // Check for malware signatures
        if ($this->checkMalwareSignatures($content, $file_path)) {
            return true;
        }
        
        // Check for suspicious patterns
        if ($this->checkSuspiciousPatterns($content, $file_path)) {
            return true;
        }
        
        return false;
    }
    
    /**
     * Get core files
     */
    private function getCoreFiles() {
        $core_files = array();
        
        $wp_files = array(
            'wp-config.php',
            'wp-salt.php',
            'wp-activate.php',
            'wp-blog-header.php',
            'wp-comments-post.php',
            'wp-cron.php',
            'wp-links-opml.php',
            'wp-load.php',
            'wp-login.php',
            'wp-mail.php',
            'wp-settings.php',
            'wp-signup.php',
            'wp-trackback.php',
            'xmlrpc.php'
        );
        
        foreach ($wp_files as $file) {
            $file_path = ABSPATH . $file;
            if (file_exists($file_path)) {
                $core_files[] = $file_path;
            }
        }
        
        return $core_files;
    }
    
    /**
     * Get plugin files
     */
    private function getPluginFiles() {
        $plugin_files = array();
        
        if (file_exists(WP_PLUGIN_DIR)) {
            $iterator = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator(WP_PLUGIN_DIR));
            
            foreach ($iterator as $file) {
                if ($file->isFile() && $file->getExtension() === 'php') {
                    $plugin_files[] = $file->getPathname();
                }
            }
        }
        
        return $plugin_files;
    }
    
    /**
     * Get theme files
     */
    private function getThemeFiles() {
        $theme_files = array();
        
        if (file_exists(get_theme_root())) {
            $iterator = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator(get_theme_root()));
            
            foreach ($iterator as $file) {
                if ($file->isFile() && $file->getExtension() === 'php') {
                    $theme_files[] = $file->getPathname();
                }
            }
        }
        
        return $theme_files;
    }
    
    /**
     * Get quarantine directory
     */
    private function getQuarantineDirectory() {
        $upload_dir = wp_upload_dir();
        $quarantine_dir = $upload_dir['basedir'] . '/kloudbean-enterprise-security/quarantine';
        
        if (!file_exists($quarantine_dir)) {
            wp_mkdir_p($quarantine_dir);
        }
        
        return $quarantine_dir;
    }
    
    /**
     * Get scan results
     */
    public function getScanResults($filters = array()) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_threats';
        
        $where_clause = '';
        $params = array();
        
        if (!empty($filters['threat_type'])) {
            $where_clause .= ' AND threat_type = %s';
            $params[] = $filters['threat_type'];
        }
        
        if (!empty($filters['severity'])) {
            $where_clause .= ' AND severity = %s';
            $params[] = $filters['severity'];
        }
        
        if (!empty($filters['start_date'])) {
            $where_clause .= ' AND timestamp >= %s';
            $params[] = $filters['start_date'];
        }
        
        if (!empty($filters['end_date'])) {
            $where_clause .= ' AND timestamp <= %s';
            $params[] = $filters['end_date'];
        }
        
        $limit = $filters['limit'] ?? 20;
        $offset = $filters['offset'] ?? 0;
        
        $query = "SELECT * FROM $table_name WHERE 1=1 $where_clause ORDER BY timestamp DESC LIMIT %d OFFSET %d";
        $params[] = $limit;
        $params[] = $offset;
        
        return $wpdb->get_results($wpdb->prepare($query, $params));
    }
    
    /**
     * Get quarantine files
     */
    public function getQuarantineFiles() {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_quarantine';
        
        return $wpdb->get_results("SELECT * FROM $table_name ORDER BY quarantined_at DESC");
    }
    
    /**
     * Restore quarantined file
     */
    public function restoreQuarantinedFile($quarantine_id) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_quarantine';
        
        $quarantine = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM $table_name WHERE id = %d",
            $quarantine_id
        ));
        
        if (!$quarantine) {
            return false;
        }
        
        if (file_exists($quarantine->quarantine_path)) {
            if (copy($quarantine->quarantine_path, $quarantine->original_path)) {
                // Update quarantine record
                $wpdb->update(
                    $table_name,
                    array(
                        'restored_at' => current_time('mysql'),
                        'restored_by' => get_current_user_id()
                    ),
                    array('id' => $quarantine_id),
                    array('%s', '%d'),
                    array('%d')
                );
                
                // Delete quarantined file
                unlink($quarantine->quarantine_path);
                
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Delete quarantined file
     */
    public function deleteQuarantinedFile($quarantine_id) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'kbes_quarantine';
        
        $quarantine = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM $table_name WHERE id = %d",
            $quarantine_id
        ));
        
        if (!$quarantine) {
            return false;
        }
        
        if (file_exists($quarantine->quarantine_path)) {
            unlink($quarantine->quarantine_path);
        }
        
        $wpdb->delete(
            $table_name,
            array('id' => $quarantine_id),
            array('%d')
        );
        
        return true;
    }
}
